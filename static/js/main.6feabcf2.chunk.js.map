{"version":3,"sources":["TextToSpeech/TextToSpeech.js","Paragraph/Paragraph.js","List/List.js","App.js","serviceWorker.js","index.js"],"names":["TextToSpeech","props","state","error","isLoaded","selected_voice","items","synth","voices","available_voices","window","speechSynthesis","getVoices","length","addEventListener","this","setState","event","value","target","text","index","utterThis","SpeechSynthesisUtterance","voice","pitch","rate","speak","console","log","name","cancel","onChange","handleChange","bind","map","selected","onClick","playText","cancelText","React","Component","Paragraph","url","bookcode","id","fetch","then","res","json","result","message","word","page","paragraph","getCurrentID","date1","Date","date2","difference","getTime","Math","floor","List","booklist","title","total","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6feabcf2.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass TextToSpeech extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      selected_voice: null,\n      items: [],\n      synth: null,\n      voices: null,\n      \n    };\n    \n  }\n  componentDidMount() {\n        var available_voices;\n        var synth;\n            \n        // list of languages is probably not loaded, wait for it\n        if(window.speechSynthesis.getVoices().length === 0) {\n\t        window.speechSynthesis.addEventListener('voiceschanged', function() {\n\t\t        available_voices = window.speechSynthesis.getVoices();\n                synth = window.speechSynthesis;\n                this.setState({\n                              isLoaded: true,\n                              items: available_voices,\n                              selected_voice: 27,\n                              synth: synth,\n                              voices: available_voices\n                              \n                });\n\t        });\n        }\n        else {\n\t        available_voices = window.speechSynthesis.getVoices();\n            synth = window.speechSynthesis;\n            this.setState({\n              isLoaded: true,\n              items: available_voices,\n              selected_voice: 27,\n              synth: synth,\n              voices: available_voices\n            });\n        }\n        \n  }\n\n  handleChange(event) {\n        let value = event.target.value;\n            this.setState({\n              isLoaded: true,\n              selected_voice: value\n            });\n  }\n\n  playText(text, index){\n      var utterThis = new SpeechSynthesisUtterance();\n      utterThis.text = text;\n      utterThis.voice = this.state.voices[index] ;\n      utterThis.pitch = 0;\n      utterThis.rate = 0.7;\n      this.state.synth.speak(utterThis);\n      utterThis.addEventListener('mark', function(event) { \n          console.log('A mark was reached: ' + event.name);\n        });\n  }\n\n  cancelText(){\n    this.state.synth.cancel();\n  }\n  \n\n  \n  render() {\n\n      return (\n        <div><select onChange={this.handleChange.bind(this)}> {this.state.items.map((value,index) =>  {\n              if (index===27){\n                return <option selected=\"selected\" value={index}>{value.name}</option>\n              }else{\n                return <option value={index}>{value.name}</option>\n              } \n\n          })}</select>\n          <button onClick={() => this.playText(this.props.text, this.state.selected_voice)}>play</button>\n          <button onClick={() => this.cancelText()}>stop</button>  \n        </div>\n      );\n  }\n}\n\n\nexport default TextToSpeech;\n","import React from 'react';\nimport TextToSpeech from '../TextToSpeech/TextToSpeech';\nclass Paragraph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    const url = \"https://gesab001.github.io/assets/egw/book_\"+this.props.bookcode+\"_id_\"+this.props.id+\".json\";\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n\n        <div><p>{items.word} ({items.bookcode}, p.{items.page}, par.{items.paragraph})</p><TextToSpeech text={items.word}/></div>\n\n      );\n    }\n  }\n}\nexport default Paragraph;\n","import React from 'react';\nimport Paragraph from '../Paragraph/Paragraph';\n\nclass List extends React.Component {\n constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      booklist: []\n    };\n  }\n  render() {\n    this.state.booklist = this.props.booklist;\n    return (\n         <div>\n          {this.state.booklist.map((value,index) =>  {\n              return <div><h1>{value.title}</h1><Paragraph bookcode={value.bookcode} id={getCurrentID(value.bookcode)%value.total}/></div>\n          })}\n         </div>);\n  }\n}\n\nfunction getCurrentID(bookcode){\n\n    var date1 = new Date();\n    var date2 = new Date(2018, 5, 22);\n    if (bookcode==\"DA\"){\n       date2 = new Date(2016, 11, 30);\n    }\n    if (bookcode==\"CL\"){\n       date2 = new Date(2016, 4,15);\n    }\n    var difference = date1.getTime() - date2.getTime();\n    var minutesDifference = Math.floor(difference/1000/60/60/24);\n    var currentID=minutesDifference;\n    return currentID;\n}\nexport default List;\n\n/*\nNotice that you now have three files in your project:\n\"App.js\", \"index.js\", and \"index.html\".\n*/\n\n\n","import React from 'react';\nimport List from './List/List';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    }; \n  }\n\n  componentDidMount() {\n    const url = \"https://gesab001.github.io/assets/egw/booklist.json\";\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.items\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <List booklist={items}/>\n\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}